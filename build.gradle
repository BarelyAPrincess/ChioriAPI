import java.text.SimpleDateFormat

defaultTasks 'clean', 'build'

apply plugin: 'eclipse'
apply plugin: 'java'
apply plugin: 'license'
// apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'checkstyle'
apply from: 'etc/publish.gradle'

repositories {
	jcenter()
	mavenCentral()
}

buildscript {
	repositories {
		jcenter()
		mavenCentral()
	}

	dependencies {
		// classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.3'
		classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.11.0'
	}
}

def gitDescribe()
{
	try
	{
		// determine git-describe output
		def stdout = new ByteArrayOutputStream()
		exec {
			commandLine 'git', 'rev-parse', '--short', 'HEAD'
			standardOutput = stdout
		}
		return stdout.toString().trim()
	}
	catch ( Throwable e )
	{
		return "unknown"
	}
}

def getVersionNumber()
{
	try
	{
		Properties props = new Properties()
		props.load( new FileInputStream( new File( "./src/main/resources/api.properties" ) ) )

		return props.getProperty( "project.versionMajor" ) + "." + props.getProperty( "project.versionMinor" ) + "." + props.getProperty( "project.versionRevision" )
	}
	catch ( Throwable e )
	{
		return 0
	}
}

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

def rawVersion = getVersionNumber() + '-' + gitDescribe()
def jenkins_build = System.getenv( "BUILD_NUMBER" )
def travis_build = System.getenv( "TRAVIS_BUILD_NUMBER" )
def buildNumber = '0'

group = 'com.chiorichan'
description = 'Feature Rich Application API for Java Development'

if ( System.getenv( "releaseBuild" ) != null )
{
	version = getVersionNumber()
}
else
{
	if ( jenkins_build != null )
	{
		version = rawVersion + '-jenkins-' + jenkins_build
		buildNumber = jenkins_build
	}
	else if ( travis_build != null )
	{
		version = rawVersion + '-travis-' + travis_build
		buildNumber = travis_build
	}
	else
	{
		version = rawVersion + '-dev'
	}
}

distsDirName = 'dist'
libsDirName = 'dist'

compileJava {options.encoding = 'UTF-8'}
javadoc {options.encoding = "UTF-8"}

checkstyle {
	configFile = file( 'etc/checkstyle.xml' )
	configProperties = ["basedir": project.projectDir]
}

checkstyleMain.source = "src/main/java"
checkstyleMain.exclude '**/joptsimple/**'
checkstyleMain.exclude '**/org/yaml/snakeyaml/**'
checkstyleMain.exclude '**/org/fusesource/jansi/**'
checkstyleMain.exclude '**/org/fusesource/hawtjni/**'

eclipse {
	project {name = 'ChioriAPI'}
}

license {
	header rootProject.file( 'etc/HEADER' )
	ignoreFailures true
	strictCheck true
	mapping 'yaml', 'SCRIPT_STYLE'
	mapping 'yml', 'SCRIPT_STYLE'
	excludes( ['**/*.md5',
			'**/*.txt',
			'**/*.bmp',
			'**/*.png',
			'**/*.jpg',
			'**/*.yaml',
			'**/*.yml',
			'**/*.properties',
			'**/config.yaml',
			'**/joptsimple/**',
			'**/org/yaml/snakeyaml/**',
			'**/org/fusesource/jansi/**',
			'**/org/fusesource/hawtjni/**'] )
	ext.year = Calendar.getInstance().get( Calendar.YEAR )
	ext.name = 'Chiori Greene a.k.a. Chiori-chan'
	ext.email = 'me@chiorichan.com'
}

subprojects {
	apply plugin: 'java'
	apply plugin: 'eclipse'

	repositories {mavenCentral()}

	libsDirName = '../../build/dist'

	artifacts {archives jar}
}

dependencies {
	// Used for Console ANSI Color Codes
	// compile group: 'org.fusesource.jansi', name: 'jansi', version: '1.11'

	// Used to Parse Console Input
	// compile group: 'net.sf.jopt-simple', name: 'jopt-simple', version: '5.0.1'

	// Used to Make Database Connections
	compile group: 'mysql', name: 'mysql-connector-java', version: '5.1.35'
	compile group: 'org.xerial', name: 'sqlite-jdbc', version: '3.8.11.2'
	compile group: 'com.h2database', name: 'h2', version: '1.4.187'

	// Used for Programming Convenience
	compile group: 'com.google.guava', name: 'guava', version: '18.0'
	compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.3.2'
	compile group: 'commons-io', name: 'commons-io', version: '2.4'
	compile group: 'commons-net', name: 'commons-net', version: '3.3'
	compile group: 'commons-codec', name: 'commons-codec', version: '1.9'

	// Used to load configs
	/* compile group: 'org.yaml', name: 'snakeyaml', version: '1.17' */

	// Used to format Time and Dates
	compile group: 'joda-time', name: 'joda-time', version: '2.7'
	compile group: 'org.ocpsoft.prettytime', name: 'prettytime', version: '3.2.5.Final'

	// Used to format Phone Numbers
	compile group: 'com.googlecode.libphonenumber', name: 'libphonenumber', version: '7.0.4'

	// Used for serialization within Sites and Autoupdater
	compile group: 'com.google.code.gson', name: 'gson', version: '2.3'

	// Used by MavenUtils and some scripts
	compile group: 'org.apache.httpcomponents', name: 'fluent-hc', version: '4.3.5'

	compile group: 'org.json', name: 'json', version: '20160810'
}

// shadowJar
// { include("**/*"); }

jar {
	manifest {
		attributes 'Implementation-Title': 'Chiori\'s API'
		attributes 'Implementation-Version': version
		attributes 'Implementation-Vendor': 'Chiori Greene a.k.a. Chiori-chan'
		attributes 'Implementation-Vendor-Id': 'me@chiorichan.com'
		// attributes 'Main-Class': 'com.chiorichan.Loader'
	}
}

task sourcesArchive( type: Zip ) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

task javadocArchive( type: Zip, dependsOn: 'javadoc' ) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

task writeApiPropertiesFile {
	doFirst {
		SimpleDateFormat sdf = new SimpleDateFormat( "EEE, d MMM yyyy HH:mm:ss Z" )

		Properties props = new Properties()
		props.load( new FileInputStream( file( "src/main/resources/api.properties" ) ) )
		props.setProperty( "project.builtOn", sdf.format( new Date() ) )
		props.setProperty( "project.build", buildNumber )
		props.setProperty( "project.version", version )

		File f2 = file( "build/dist/api.properties" )
		File f3 = file( "build/resources/main/api.properties" )
		f2.parentFile.mkdirs()
		f3.parentFile.mkdirs()
		OutputStream out2 = new FileOutputStream( f2 )
		OutputStream out3 = new FileOutputStream( f3 )
		props.store( out2, "Chiori API Build Properties File" )
		props.store( out3, "Chiori API Build Properties File" )
	}
}

task wrapper( type: Wrapper ) {gradleVersion = '3.3'}

jar.dependsOn writeApiPropertiesFile

artifacts {archives sourcesArchive, javadocArchive}
// shadowJar

